@page "/"

@using System.Globalization
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.BarChart.Axes
@using ChartJs.Blazor.LineChart
@using MyFirstBlazor.Data
@using MyFirstBlazor.Models
@using MyFirstBlazor.Helpres
@using SIS.Services
@using SIS.Models
@inject BrapiService BrapiService
@inject ILogger<Index> logger


<style>
    /* General Styles */
    .shadow {
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);
    }

    .chartjs-render-monitor {
        animation: chartjs-render-animation 1ms;
    }

    .chart-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-top: 10px;
        padding: 20px;
    }

        .chart-container > * {
            margin-bottom: 10px;
        }

    .table {
        border-collapse: collapse;
        width: 100%;
    }

    .th-centered {
        text-align: center;
        border: 1px solid black;
    }

    .td-centered {
        border: 1px solid black;
        text-align: center;
    }

    .table th {
        background-color: #007bff;
        color: #fff;
    }

    .table td button {
        display: block;
        margin: 0 auto;
    }

    .table-container {
        height: 150px;
        overflow: scroll;
    }

    /* Grid Styles */

    .container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        grid-gap: 10px;
    }

    .item {
        background-color: #eee;
        padding: 10px;
    }

    @@media screen and (max-width: 768px) {
        .container {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }
    }

    @@media screen and (max-width: 480px) {
        .container {
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        }
    }

    @@media screen and (min-width: 769px) {
        .chart-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-gap: 10px;
            align-items: flex-start;
        }
    }

    @@media screen and (max-width: 768px) {
        .chart-container {
            flex-direction: column;
            align-items: center;
        }

            .chart-container > * {
                width: 100%;
                max-width: 1200px;
            }
    }

    /* Table Styles */

    .table {
        border-collapse: collapse;
        width: 100%;
        max-width: 600px;
    }

        .table th,
        .table td {
            border: 1px solid black;
            padding: 2px;
            text-align: center;
            vertical-align: middle; /* center text vertically */
        }

        .table thead th {
            background-color: #007bff;
            color: #fff;
        }


        .table th {
            background-color: #e8e8e8;
        }

    .btn-small {
        height: 28px;
    }


    .table td,
    .table th {
        padding: 1px; /* Decrease padding to reduce row height */
        font-size: 15px; /* Adjust font size to fit content */
    }
</style>

<PageTitle>Calculadora de Dividendos</PageTitle>
<br />

@*<div class="container mt-5">*@
<div class="flex-column align-items-center">
    <div class="row justify-content-center">
        <div class="col-12 col-sm-8 " style=" max-width: 600px">

            <MudGrid>
                <MudItem xs="12">
                    <MudAutocomplete T="string" Label="Ticker"
                                     @bind-Value="_ativoTicker" SearchFunc="@Search1"
                                     AdornmentIcon="@Icons.Material.Filled.Search"
                                     AdornmentColor="Color.Primary" />
                </MudItem>
            </MudGrid>

            <br />

            <div class="d-flex flex-column align-items-center">
                <button class="btn btn-primary" disabled="@IsLoading" @onclick="LoadData">Adicionar</button>
                <br />
                @if (IsLoading)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                }
            </div>
        </div>

        <div class="d-flex flex-column align-items-center">
            @if (_configDivid12Meses != null)
            {
                <hr class="d-sm-none" style="margin-top: 10px; margin-bottom: 10px; border: 0; border-top: 1px solid #ccc; width:100%">
                <table class="table shadow bg-white">
                    <thead>
                        <tr>
                            <th class="text-center">Ticker</th>
                            <th class="text-center">Valor</th>
                            <th class="text-center">P/Vp</th>
                            <th class="text-center">Remover</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in _carteiraAtual.fiis.OrderBy(lanc => lanc.fii.Pvp))
                        {
                            <tr>
                                <td class="text-center"><strong>@item.fii.Ticker</strong></td>
                                <td class="text-center">@item.fii.ValorAtual.ToString("C", _cultureBr)</td>
                                <td class="text-center">@item.fii.Pvp.ToString("N2", _cultureBr)</td>
                                <td class="text-center"><button class="btn btn-primary btn-small" @onclick="@(() => Remove(item.fii))">X</button></td>
                            </tr>
                        }
                        @foreach (var item in _carteiraAtual.acoes.OrderBy(lanc => lanc.acao.Pvp))
                        {
                            <tr>
                                <td class="text-center"><strong>@item.acao.Ticker</strong></td>
                                <td class="text-center">@item.acao.ValorAtual.ToString("C", _cultureBr)</td>
                                <td class="text-center">@item.acao.Pvp.ToString("C", _cultureBr)</td>
                                <td class="text-center"><button class="btn btn-primary btn-small" @onclick="@(() => Remove(item.acao))">X</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            @if (_carteiraAtual.PossuiLancamentos())
            {
                <div class="chart-container bg-white">
                    <Chart Config="_configDivid12Meses" @ref="_chartDivid12Meses" Height="300" Width="400" />
                    <Chart Config="_configThisMonthDividend" @ref="_chartThisMonthDividend" Height="300" Width="400" />
                </div>
            }
        </div>
    </div>

</div>

<br />
<br />




@code{

    private void Remove(FII item)
    {
        _carteiraAtual.Remove(item);
        SetupLast12MonthsChart();
        SetupThisMonthDividChart();
    }
    private void Remove(Acao item)
    {
        _carteiraAtual.Remove(item);
        SetupLast12MonthsChart();
        SetupThisMonthDividChart();
    }


    #region Pequisa de Tickers com autocomplete

    private List<string> _tickers;

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        if (_tickers is null)
            _tickers = await BrapiService.GetAvaliableTickers();

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return _tickers;
        return _tickers.Where(x => x.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));
    }

    #endregion



    // C#
    ChartHelper colorHelper = new ChartHelper();
    private CultureInfo _cultureBr = new CultureInfo("pt-BR");

    private bool IsLoading = false;
    IFIIService fiiService = new FIIService();
    private string _ativoTicker;
    private Carteira _carteiraAtual = new Carteira();

    private Chart _chartDivid12Meses;
    private Chart _chartThisMonthDividend;
    private BarConfig _configDivid12Meses;
    private BarConfig _configThisMonthDividend;


    private async Task LoadData()
    {
        if (_ativoTicker != null && _ativoTicker != string.Empty)
        {
            IsLoading = true;

            //for testing
            if (_ativoTicker == "10fiis")
            {
                await LoadTests();
            }
            else
            {
                try
                {
                    var fii = await fiiService.ObterFII(_ativoTicker);

                    if (fii.IsValid)
                    {
                        logger.LogDebug("Fii válido: " + fii.ToString());
                        _carteiraAtual.Add(fii);

                        // Setup charts
                        SetupLast12MonthsChart();
                        SetupThisMonthDividChart();
                    }
                    else
                    {
                        Console.WriteLine("Fii inválido: " + fii.ToString());
                        logger.LogInformation("Fii inválido");
                    }
                }
                catch (Exception exception)
                {
                    throw new Exception(exception.Message);
                }
            }
            IsLoading = false;
        }
    }


    private async Task LoadTests()
    {
        try
        {
            string[] lstTickers = {"irdm11","cpts11", "rvbi11", "btlg11",
                                    "knsc11", "tgar11", "hglg11", "xpml11",
                                    "hsml11", "trxf11" };

            List<FII> listaFiis = await fiiService.ObterFIIs(lstTickers);

            _carteiraAtual.Add(listaFiis);

            SetupLast12MonthsChart();
            SetupThisMonthDividChart();
        }
        catch (Exception exception)
        {
            throw new Exception(exception.Message);
        }
    }

    private void SetupLast12MonthsChart()
    {
        //if (!_carteiraAtual.PossuiLancamentos())
        //    return;

        if (_configDivid12Meses is null)
        {
            _configDivid12Meses = new BarConfig()
            {
                Options = new BarOptions
                {
                    Responsive = false,

                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Proventos dos últimos 12m (para 1 cota)"
                    },
                    Legend = new Legend
                    {
                        Display = false
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Index,
                        Intersect = false
                    },
                    Scales = new BarScales
                    {

                        XAxes = new List<CartesianAxis>
                    {
                            new BarCategoryAxis
                            {
                                Stacked = true,
                            //    Ticks = new CategoryTicks
                            //{
                            //    Callback = new JavaScriptHandler<AxisTickCallback>(new AxisTickCallback
                            //    {
                            //                Callback = new Func<double, int, string>((value, index) =>
                            //            {
                            //                // Hide every 2nd tick label
                            //                return index % 2 == 0 ? value.ToString() : "";
                            //            })
                            //    })
                            //}
                            }
                        }
                       ,

                        YAxes = new List<CartesianAxis>
                    {
                            new BarLinearCartesianAxis
                            {
                                Stacked = true
                            }
                        }
                    }
                }
            };
        }

  


        //Clear the dataset to add all of then again.
        _configDivid12Meses.Data.Datasets.Clear();

        //// Monthly totals
        Dictionary<int, double> monthlyData = Enumerable.Range(0, 12).ToDictionary(x => x, x => 0.0);


        // Loop through the list of FII and create a dataset for each FII
        for (int x = 0; x < _carteiraAtual.fiis.Count; x++)
        {
            List<double> divs = _carteiraAtual.fiis[x].fii.GetDividendData();


            IDataset<double> barsDataset = new BarDataset<double>(divs)
            {
                Label = _carteiraAtual.fiis[x].fii.Ticker,
                BackgroundColor = colorHelper.GetColors()[x],
                BorderWidth = 1,
                Order = 2
            };


            //Set labels for the X Axis
            List<string> labels = _carteiraAtual.fiis[x].fii.GetDividendMonths();


            ////Loop for only 12 months
            for (int i = 0; i < 12; i++)
            {
                //Adds the dividend of each month of each fii
                monthlyData[i] += _carteiraAtual.fiis[x].fii.Dividendos[i].Valor;
                //Rounds its value to two decimal points
                monthlyData[i] = Math.Round(monthlyData[i], 2);

                string label = labels[i];
                if (!_configDivid12Meses.Data.Labels.Contains(label))
                {
                    _configDivid12Meses.Data.Labels.Add(label);
                }

            }

            _configDivid12Meses.Data.Datasets.Add(barsDataset);
        }




        List<double> reversedList = monthlyData.Values.ToList();
        reversedList.Reverse();

        IDataset<double> lineDataset = new LineDataset<double>(reversedList)
        {
            Label = "Total do Mês",
            Fill = false,
            BorderColor = "#007bff",
            BorderWidth = 2,
            Order = 1
        };

        //// Set a callback function to modify the label of each item in the dataset
        //ChartJsInterop.SetDatasetItemCallback(lineDataset, item =>
        //{
        //    // Concatenate "R$" symbol with the value of the label and format it with two decimal points
        //    item.Label = $"R${item.Value.ToString("F2")}";
        //    return item;
        //});

        //IDataset<double> lineDataset = new LineDataset<double>(reversedList)
        //{
        //    Label = "Total do Mês",
        //    Fill = false,
        //    BorderColor = "#007bff",
        //    BorderWidth = 2,
        //    Order = 1,
        //    ItemCallback = new Func<ChartJsItem<double>, ChartJsItem<double>>(item =>
        //    {
        //        // Concatenate "R$" symbol with the value of the label and format it with two decimal points
        //        item.Label = $"R${item.Value.ToString("F2")}";
        //        return item;
        //    })
        //};

        _configDivid12Meses.Data.Datasets.Add(lineDataset);
    }

    private void SetupThisMonthDividChart()
    {
        //if (!_carteiraAtual.PossuiLancamentos())
        //    return;

        if (_configThisMonthDividend is null)
        {
            _configThisMonthDividend = new BarConfig()
            {
                Options = new BarOptions
                {
                    Responsive = false,

                    Legend = new Legend
                    {
                        Position = ChartJs.Blazor.Common.Enums.Position.Top,
                        Display = false
                    },
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Dividendos deste mês: " + DateTime.Now.ToString("MMMM").ToUpper()
                    },
                    Tooltips = new Tooltips
                    {
                        Enabled = true
                    }

                }
            };
        }

        //Clear the dataset to add all of then again.
        _configThisMonthDividend.Data.Datasets.Clear();
        _configThisMonthDividend.Data.Labels.Clear();

        //Lista com todos dividendos
        List<double> listaDividendos = new List<double>();
        //Media de dividendos
        List<double> mediaDoMes = new List<double>();

        // Loop through the list of FII and create a dataset for each FII
        foreach (LancamentoFII lanc in _carteiraAtual.fiis.OrderByDescending(f => f.fii.GetCurrentMonthDividend()))
        {
            listaDividendos.Add(lanc.fii.GetCurrentMonthDividend());
            _configThisMonthDividend.Data.Labels.Add(lanc.fii.Ticker);
        }

        IDataset<double> barsDataset = new BarDataset<double>(listaDividendos)
        {
            Label = "Dividendo",
            BackgroundColor = colorHelper.GetColors(),
            BorderWidth = 1,
            Order = 2
        };

        _configThisMonthDividend.Data.Datasets.Add(barsDataset);

        // Calcula media e adiciona na lista
        //double avgDividendos = Math.Round(listaDividendos.Average(), 2); // Round to 2 decimal points

        foreach (double div in listaDividendos)
        {
            mediaDoMes.Add(Math.Round(listaDividendos.Average(), 2));
        }

        // Cria uma linha com a media
        IDataset<double> lineDataset = new LineDataset<double>(mediaDoMes)
        {
            Label = "Média do Mês",
            Fill = false,
            BorderColor = "#007bff",
            BorderWidth = 2,
            Order = 1
            //LineTension = 0.1
        };

        _configThisMonthDividend.Data.Datasets.Add(lineDataset);

    }
}


